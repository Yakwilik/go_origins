// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	structs "gitlab.com/vk-go/lectures-2022-2/06_databases/99_hw/redditclone/structs"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CheckIdentity mocks base method.
func (m *MockAuthorization) CheckIdentity(username string, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIdentity", username, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckIdentity indicates an expected call of CheckIdentity.
func (mr *MockAuthorizationMockRecorder) CheckIdentity(username, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIdentity", reflect.TypeOf((*MockAuthorization)(nil).CheckIdentity), username, id)
}

// CreateUser mocks base method.
func (m *MockAuthorization) CreateUser(user structs.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthorizationMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), user)
}

// GenerateToken mocks base method.
func (m *MockAuthorization) GenerateToken(username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthorizationMockRecorder) GenerateToken(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthorization)(nil).GenerateToken), username, password)
}

// ParseToken mocks base method.
func (m *MockAuthorization) ParseToken(token string) (structs.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(structs.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthorizationMockRecorder) ParseToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthorization)(nil).ParseToken), token)
}

// MockPosts is a mock of Posts interface.
type MockPosts struct {
	ctrl     *gomock.Controller
	recorder *MockPostsMockRecorder
}

// MockPostsMockRecorder is the mock recorder for MockPosts.
type MockPostsMockRecorder struct {
	mock *MockPosts
}

// NewMockPosts creates a new mock instance.
func NewMockPosts(ctrl *gomock.Controller) *MockPosts {
	mock := &MockPosts{ctrl: ctrl}
	mock.recorder = &MockPostsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPosts) EXPECT() *MockPostsMockRecorder {
	return m.recorder
}

// AddComment mocks base method.
func (m *MockPosts) AddComment(comment structs.Comment, postID primitive.ObjectID) (structs.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddComment", comment, postID)
	ret0, _ := ret[0].(structs.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddComment indicates an expected call of AddComment.
func (mr *MockPostsMockRecorder) AddComment(comment, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockPosts)(nil).AddComment), comment, postID)
}

// DeleteComment mocks base method.
func (m *MockPosts) DeleteComment(commentID, postID primitive.ObjectID, userID int) (structs.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", commentID, postID, userID)
	ret0, _ := ret[0].(structs.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockPostsMockRecorder) DeleteComment(commentID, postID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockPosts)(nil).DeleteComment), commentID, postID, userID)
}

// DeletePostByID mocks base method.
func (m *MockPosts) DeletePostByID(postID primitive.ObjectID, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePostByID", postID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePostByID indicates an expected call of DeletePostByID.
func (mr *MockPostsMockRecorder) DeletePostByID(postID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePostByID", reflect.TypeOf((*MockPosts)(nil).DeletePostByID), postID, userID)
}

// DownVote mocks base method.
func (m *MockPosts) DownVote(postID primitive.ObjectID, vote structs.Vote) (structs.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownVote", postID, vote)
	ret0, _ := ret[0].(structs.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownVote indicates an expected call of DownVote.
func (mr *MockPostsMockRecorder) DownVote(postID, vote interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownVote", reflect.TypeOf((*MockPosts)(nil).DownVote), postID, vote)
}

// GetAllPosts mocks base method.
func (m *MockPosts) GetAllPosts() ([]structs.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPosts")
	ret0, _ := ret[0].([]structs.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPosts indicates an expected call of GetAllPosts.
func (mr *MockPostsMockRecorder) GetAllPosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPosts", reflect.TypeOf((*MockPosts)(nil).GetAllPosts))
}

// GetPostByID mocks base method.
func (m *MockPosts) GetPostByID(id primitive.ObjectID) (structs.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostByID", id)
	ret0, _ := ret[0].(structs.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostByID indicates an expected call of GetPostByID.
func (mr *MockPostsMockRecorder) GetPostByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostByID", reflect.TypeOf((*MockPosts)(nil).GetPostByID), id)
}

// NewPost mocks base method.
func (m *MockPosts) NewPost(data structs.NewPostData, author structs.Author) (structs.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewPost", data, author)
	ret0, _ := ret[0].(structs.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewPost indicates an expected call of NewPost.
func (mr *MockPostsMockRecorder) NewPost(data, author interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewPost", reflect.TypeOf((*MockPosts)(nil).NewPost), data, author)
}

// PostsByCategory mocks base method.
func (m *MockPosts) PostsByCategory(category string) ([]structs.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostsByCategory", category)
	ret0, _ := ret[0].([]structs.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostsByCategory indicates an expected call of PostsByCategory.
func (mr *MockPostsMockRecorder) PostsByCategory(category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostsByCategory", reflect.TypeOf((*MockPosts)(nil).PostsByCategory), category)
}

// PostsByUsername mocks base method.
func (m *MockPosts) PostsByUsername(username string) ([]structs.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostsByUsername", username)
	ret0, _ := ret[0].([]structs.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostsByUsername indicates an expected call of PostsByUsername.
func (mr *MockPostsMockRecorder) PostsByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostsByUsername", reflect.TypeOf((*MockPosts)(nil).PostsByUsername), username)
}

// UnVote mocks base method.
func (m *MockPosts) UnVote(postID primitive.ObjectID, userID int) (structs.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnVote", postID, userID)
	ret0, _ := ret[0].(structs.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnVote indicates an expected call of UnVote.
func (mr *MockPostsMockRecorder) UnVote(postID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnVote", reflect.TypeOf((*MockPosts)(nil).UnVote), postID, userID)
}

// Upvote mocks base method.
func (m *MockPosts) Upvote(postID primitive.ObjectID, vote structs.Vote) (structs.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upvote", postID, vote)
	ret0, _ := ret[0].(structs.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upvote indicates an expected call of Upvote.
func (mr *MockPostsMockRecorder) Upvote(postID, vote interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upvote", reflect.TypeOf((*MockPosts)(nil).Upvote), postID, vote)
}
